{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","categories","useState","inputVal","setInputVal","className","onSubmit","e","preventDefault","trim","length","oldCategories","type","placeholder","value","onChange","target","getGifs","category","url","encodeURI","Promise","resolve","reject","a","fetch","json","data","gifs","map","id","title","images","downsized_medium","console","log","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","useFetchGifs","img","GifExpertApp","c","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6BCmCCQ,EAvCK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,KAAjBC,WAEJC,mBAAS,KAFY,mBAE9CC,EAF8C,KAEpCC,EAFoC,KAkBrD,OACE,uBAAMC,UAAU,oBAAoBC,SAVjB,SAACC,GACpBA,EAAEC,iBAEEL,EAASM,OAAOC,OAAS,IAC3BV,GAAc,SAACW,GAAD,OAAoBR,GAApB,mBAAiCQ,OAC/CP,EAAY,MAKd,UAKE,uBACEQ,KAAK,OACLC,YAAY,kBACZC,MAAOX,EACPY,SAvBwB,SAACR,GAC7BH,EAAYG,EAAES,OAAOF,UAwBnB,iD,+BCjCOG,EAAU,SAACC,GACtB,IAAMC,EAAG,iDAA6CC,UACpDF,GADO,sDAIT,OAAO,IAAIG,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,+EAEeC,MAAMN,GAFrB,8BAE2BO,OAF3B,gBAEPC,EAFO,EAEPA,KAEFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAClC,MAAO,CACLF,KACAC,QACAZ,IAAG,OAAEa,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBd,QAIlCG,EAAQM,GAZO,kDAcfM,QAAQC,IAAR,MACAZ,EAAO,EAAD,IAfS,0DAAZ,0DCHIa,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACnC,OACE,sBAAKd,UAAU,wCAAf,UACE,kCACE,qBAAKgC,IAAKlB,EAAKmB,IAAKP,MAEtB,4BAAIA,QCmBKQ,EArBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCyB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OATAC,qBAAU,WACP,sBAAC,sBAAAnB,EAAA,kEACAkB,EADA,SAEczB,EAAQC,GAFtB,yBAEES,KAFF,KAGEa,SAAS,IAHX,wDAAD,KAMA,CAACtB,IAEGuB,EDd2BG,CAAa1B,GAAvCsB,EADwB,EACxBA,QAAeR,EADS,EACfL,KAEjB,OACE,qCACE,qBAAItB,UAAU,iBAAd,cAAiCa,EAAjC,OAECsB,GAAW,mBAAGnC,UAAU,2CAAb,wBACZ,qBAAKA,UAAU,YAAf,SACG2B,EAAOH,KAAI,SAACgB,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEZnBgB,EAAe,WAAO,IAAD,EACI5C,mBAAS,CAAC,UADd,mBACzBD,EADyB,KACbD,EADa,KAGhC,OACE,qCACE,oBAAIK,UAAU,0CAAd,SACE,iDAEF,cAAC,EAAD,CAEEL,cAAeA,IAGjB,6BACGC,EAAW4B,KAAI,SAACkB,GAAD,OACd,cAAC,EAAD,CAAiB7B,SAAU6B,GAAbA,YCZxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAE1D7D,M","file":"static/js/main.b21bc97c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst AddCategory = ({ setCategories, categories }) => {\n  // se define un state para el input\n  const [inputVal, setInputVal] = useState(\"\")\n\n  // esta funcion setea el valor del input cada vez que es llamada\n  const handleInputWhenChange = (e) => {\n    setInputVal(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (inputVal.trim().length > 2) {\n      setCategories((oldCategories) => [inputVal, ...oldCategories])\n      setInputVal(\"\")\n    }\n  }\n\n  return (\n    <form className=\"form-add-category\" onSubmit={handleSubmit}>\n      {/* \n        value={inputVal} renderiza el valor de esa variable \n        onChange={ fn } es obligatorio colocarlo para manejar el estado del input y obtener su inf\n      */}\n      <input\n        type=\"text\"\n        placeholder=\"Add category...\"\n        value={inputVal}\n        onChange={handleInputWhenChange}\n      />\n      <button>Agregar</button>\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","export const getGifs = (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=8rj1Z0ObHhAAc1swK451kQkAp5lPUqLx`\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await (await fetch(url)).json()\n\n      const gifs = data.map(({ id, title, images }) => {\n        return {\n          id,\n          title,\n          url: images?.downsized_medium.url,\n        }\n      })\n\n      resolve(gifs)\n    } catch (error) {\n      console.log(error)\n      reject(error)\n    }\n  })\n}\n","import React from \"react\"\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__pulse\">\n      <picture>\n        <img src={url} alt={title} />\n      </picture>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\nimport { GifGridItem } from \"./GifGridItem\"\n\nconst GifGrid = ({ category }) => {\n  const { loading, data: images } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3 className=\"category-title\"> {category} </h3>\n      {/* If en react */}\n      {loading && <p className=\"animate__animated animate__pulse loading\">Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  })\n\n  // Se utiliza para ejecutar codigo siguiendo ciertas condiciones\n  // Al dejarlo las dependencias como un arr vacio\n  // se esta estableciendo que esas lineas solo pueden ejecutarse una vez\n  useEffect(() => {\n    ;(async () => {\n      setstate({\n        data: await getGifs(category),\n        loading: false,\n      })\n    })()\n  }, [category]) // si la categoria cambia vuelve a ejecutar el effect\n\n  return state\n}\n","import React, { useState } from \"react\"\nimport AddCategory from \"./AddCategory\"\nimport GifGrid from \"./GifGrid\"\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Messi\"])\n\n  return (\n    <>\n      <h1 className=\"animate__animated animate__bounceInLeft\">\n        <i>Gif Expert App</i>\n      </h1>\n      <AddCategory\n        // Pueden pasarse funciones como props\n        setCategories={setCategories}\n      />\n\n      <ul>\n        {categories.map((c) => (\n          <GifGrid key={c} category={c} />\n        ))}\n      </ul>\n    </>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nimport \"./index.css\"\nimport { GifExpertApp } from \"./components/GifExpertApp\"\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"))\n\nreportWebVitals()\n"],"sourceRoot":""}